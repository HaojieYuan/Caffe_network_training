#!/usr/bin/env python

import unittest
import os
from context import config
from context import preprocess
from context import train
import sys
import argparse
import shutil


# GPU is for program to decide whether run CPU or GPU tests.
# GPU_ID is for GPU card pick.
GPU = False
GPU_ID = None

# Use argparse to get parameters form command linbe
# This can not be done in main() because of unittest itself
# So we put it here.
ap = argparse.ArgumentParser()
ap.add_argument("-g", "--gpu", required = False,
    help = "Sepcify your gpu id if you want to test in gpu.")
args = vars(ap.parse_args())
if args['gpu'] != None:
    GPU = True
    GPU_ID = args['gpu']


# Functions below can delete file and directories silently,
# and it will not report error if file do not exists.
def remove_file(filename):
    try:
        os.remove(filename)
    except OSError:
        pass

def remove_dir(dirname):
    try:
        shutil.rmtree(dirname)
    except OSError:
        pass

# This function is designed for test task, all the file gennerated by
# test will be deleted here.
# We cann't use tearDown() in test because it will delete file after
# every test, some file generated by one test will be useful to another test.
def remove_files():
    remove_file('train.txt')
    remove_file('val.txt')
    remove_dir('test_t_DB')
    remove_dir('test_v_DB')
    remove_file('test_bin_mean')
    remove_file('test_npy_mean.npy')
    remove_file('test_GPU_iter_20.caffemodel')
    remove_file('test_CPU_iter_20.caffemodel')
    remove_file('test_GPU_iter_20.solverstate')
    remove_file('test_CPU_iter_20.solverstate')


# We choose unittest for our test task because it is easy to read and maintain.
# Note if you want to add a test here, the function must be start with "test"
# (something like "test_foo()").
# unittest is designed for isolated test, so it get test function in lexicographical
# order, 0 is fisrt and z is last. Here some test has to use former test's result,
# so I put a serial number after "test" to keep test run in right order.
class TestTools(unittest.TestCase):

    # Checks if caffe binary file exists.
    def test_1_caffe_master(self):
        master_path = os.path.join(config.caffe_master_path, 'build/tools/caffe')
        self.assertTrue(os.path.exists(master_path))

    # Check if database generate tool and image mean compute tool exists.
    def test_2_caffe_tools(self):
        cimageset = os.path.join(config.caffe_tools_path, 'convert_imageset')
        cimagemean = os.path.join(config.caffe_tools_path, 'compute_image_mean')
        self.assertTrue(os.path.exists(cimageset))
        self.assertTrue(os.path.exists(cimagemean))

    # Check if pycaffe can be imported.
    def test_3_pycaffe(self):
        import imp
        sys.path.append(config.pycaffe_path)
        try:
            imp.find_module('caffe')
            found = True
        except ImportError:
            found = False
        self.assertTrue(found)

    # Check if list file can be generated.
    def test_4_labellist_create(self):
        train_config = {}
        val_config = {}

        train_config['_path'] = ['test_images/train/blot',
                                    'test_images/train/other']
        train_config['class_number'] = 2
        train_config['_label'] = [0, 1]
        train_config['file_path'] = 'train.txt'
        train_config['amount'] = [2, 2]

        val_config['_path'] = ['test_images/validate/blot',
                                    'test_images/validate/other']
        val_config['class_number'] = 2
        val_config['_label'] = [0, 1]
        val_config['file_path'] = 'val.txt'
        val_config['amount'] = [2, 2]

        # This is to make sure file list can be used for generating by using absolute path
        train_config['absolute_path'] = 1
        val_config['absolute_path'] = 1

        preprocess.build_list(train_config, val_config)
        self.assertTrue(os.path.exists('train.txt'))
        self.assertTrue(os.path.exists('val.txt'))

    # Check if database file can be generated.
    def test_5_lmdb_gen(self):
        lmdb_config = {}
        lmdb_config['output_path'] = './'
        lmdb_config['resize'] = True
        lmdb_config['resize_height'] = 227
        lmdb_config['resize_width'] = 227
        lmdb_config['caffe_tools_path'] = config.caffe_tools_path
        lmdb_config['data_root_path'] = '/'
        lmdb_config['train_DB_name'] = 'test_t_DB'
        lmdb_config['val_DB_name'] = 'test_v_DB'

        preprocess.build_lmdb(lmdb_config)
        self.assertTrue(os.path.exists('test_t_DB'))
        self.assertTrue(os.path.exists('test_v_DB'))

    # Check if mean file can be generated and transformed.
    def test_6_mean_gen(self):
        mean_config = {}
        mean_config['caffe_tools_path'] = config.caffe_tools_path
        mean_config['output_path'] = './'
        mean_config['train_DB_name'] = 'test_t_DB'
        mean_config['mean_file_name'] = 'test_bin_mean'
        mean_config['gen_npy_mean'] = True
        mean_config['pycaffe_path'] = config.pycaffe_path
        mean_config['npy_mean_file_name'] = 'test_npy_mean'

        # This function will do both generating and transforming.
        preprocess.gen_mean(mean_config)
        self.assertTrue(os.path.exists('test_bin_mean'))
        self.assertTrue(os.path.exists('test_npy_mean.npy'))

    # Skip CPU test if command line accept GPU parameters.
    @unittest.skipIf(GPU,'Skip because it\' GPU test')
    def test_7_train_CPU(self):
        training_config = {}
        training_config['caffe_tools_path'] = config.caffe_tools_path
        training_config['solver_file'] = 'solver_CPU.prototxt'
        training_config['use_GPU'] = False
        training_config['GPU_id'] = GPU_ID
        train.training(training_config)
        self.assertTrue(os.path.exists('test_CPU_iter_20.caffemodel'))
        self.assertTrue(os.path.exists('test_CPU_iter_20.solverstate'))

    # Skip GPU test if no GPU parameter was sepcified in commandline.
    @unittest.skipIf(not GPU,'Skip because it\' CPU test')
    def test_7_train_GPU(self):
        training_config['caffe_tools_path'] = config.caffe_tools_path
        training_config['solver_file'] = 'solver_GPU.prototxt'
        training_config['use_GPU'] = True
        training_config['GPU_id'] = GPU_ID
        train.training(training_config)
        self.assertTrue(os.path.exists('test_GPU_iter_20.caffemodel'))
        self.assertTrue(os.path.exists('test_GPU_iter_20.solverstate'))

if __name__ == '__main__':
    # Clean up generated files in old time.
    remove_files()

    # Run all the tests.
    # Note that if you use unittest.main(), its own command line parameters
    # will overide GPU parameters which we wrote and wanted.
    # So we choose another way to run these tests.
    suite = unittest.TestLoader().loadTestsFromTestCase(TestTools)
    unittest.TextTestRunner(verbosity=4).run(suite)

    # Clean up the mess.
    remove_files()
